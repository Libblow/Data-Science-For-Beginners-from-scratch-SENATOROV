"""Квизы."""

# quiz1
#
# 1) Как понять, что домашка пришла?
#     Ник в чате HomeWork. 0:15.
# 2) Как принять домашку?
#     Захожу в кошку, нажимаю Fetch origin. Захожу в history и выбираю самый свежий коммит 0:29.
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
#     Нужна для просмотра истори\свежих коммитов. При нажатии правой кнопки мыши появляются функции view on githab, amned commit, reorder commit, revert changes in commit, create branch from commit, create tag, cherry-pick commit, copy sha, copy tag.
# 3.1) Где брать ссылку на коммит? куда её отправлять?
#     History --> commit --> ПКМ --> view on githab --> копирую ссылку и отправляю в чат Homework с подписью коммит отдал.
# 4) Что такое файл лога?
#     Файл который нужно заполнять в конце каждого урока, кратко что запомнили и дата. 01:38.
# 4.1) Когда нужно его пушить?
#     В конце урока
# 5) Что такое интерпритатор?
#     Это программа которая читает и запускает наш код. 02:51
# 6) Где можно выбрать интерпритатор?
#     Cлева от ячейки ннажимаю на треугольник. Сверху выбираю (base(Python X.X.X)anaconda3). Либо нажимаю на кнопку base и так же выбираю python. 02:45.
# 7) Что такое модуль?
#     Обычный файл с .py, .ipynb. 8:48.
# 8) Как создать и отправить коммит?
#     После завершение домашки перехожу в кошку, выбираю Changes, там находятся файлы которые были изменены. В Summary пиши что было сделано , нажимаю commit to main, далее нажимаю push origin.
# 9) Как посмотреть что коммит точно отправлен и находится в github?
#     Захожу в History, нахожу новый коммит и выбираю view on github.
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
#     pre-commit run --all-files, либо после отправки коммита выскочит окно с Error
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
#     pylint это инструмент для проверки ошибок и соблюдения правил кодирования в Python. pydocstyle проверяет стиль документации кода, анализирует комментарии в коде и выдаёт предупреждения о несоответствии стандартам оформления документации, таких как использование пробелов, табуляции и отступов. flake8 анализирует код на соответствие стилю PEP 8, обнаруживает ошибки и предупреждает о потенциальных проблемах. mypy помогает обнаруживать ошибки в коде до его выполнения, он использует информацию о типах данных для проверки соответствия типов переменных и функций их использованию.
# 11) Как узнать какой именно линтер не прошёл проверку?
#     В окне Error найти имя секции с именем линтера отмеченным красным Failed.
# 12) Линтер Pylint видит markdown?
#     не видит
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
#     если после ячейки markdown, будет ячейка с кодом в котором синтаксическая ошибка
# 14) Где посмотреть номер ячейки в vscode?
#     Справа внизу (cell).
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
#     Файлы отправляются в GitHub в формате JSON. Когда .ipynb загружаете на GitHub, файл автоматически преобразуется в.ipynb.json.
# 16) Где посмотреть в какой ячейке ошибка?
#     в терминале после команды pre-commit run --all-files.
# 17) Как запустить терминал?
#     В VSC слева вверху троеточие, вбрать вкладку терминал. На винде через поиск ищем команндую строку/powershell.
# 18) Что такое линтер?
#     анализатор кода, который указывает на проблемные участки программы и помогает программисту писать более качественный код.
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
#     pylint.readthedocs.io
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
#     pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
#     Описывает информацию в модуле.Пример: модуль посвещён первому уроку. 9:27.
# 21) С какой  git команды начинается утро программиста?
#     git pull
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
#     Current repository, далее правой кнопкой мыши и нажать open in vsc. 14:25.
# 23) Что такое stash?
#   Стэш это буфер куда мы временно прячем файлы что принять pull
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531): git stash save"NAME_STASH"
#
#   Кнопка в vs code: раздел Source Control далее троеточее и выбираю stash/спрятать.
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?: Захожу в Stashed Changes и нажиаю Restore
#
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?: git stash apply
#
# 23.3) Различие между стэшем и коммитом.
#     Сохранять изменения в стэше, когда нужно временно прервать работу переключиться на другую. Это поможет избежать потери несохранённых изменений.Коммитить изменения следует после завершения работы над задачей, чтобы зафиксировать все сделанные изменения в репозитории.
#
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#     git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#         git stash clear
# 23.6) Практические примеры использования стэша.
#         Временное сохранение изменений перед переключением веток.
#         Сохранение изменений перед выполнением сложных операций, таких как перебазирование или слияние.
#         Работа над несколькими задачами одновременно без путаницы в истории коммитов.
#         Исправление ошибок или внесение правок в код без потери прогресса в текущей работе.
#         Сохранение промежуточных результатов перед длительным перерывом в работе над проектом.
# 24) Где посмотреть что есть конфликт в файлах?
#         В вкладке Changes, восклицательный знак на файле.
# 24.1) Когда он появляется?
#         Когда гит не понимает какие изменения сохранить локальные или изменения которые пришли из интрнета.
# 25) Как решить конфликт в файлах?
#         Заходим в VSC нажимаем Accept Current Change (примется то что пришло с гитхаб) или Accept incoming Change (примется локальные изменения) или Accept both Changes (примет оба изменения), либо вручную удалить не нужное и нажать resolve in merge editor.
# 26) Напишиие правильное утверждение
#         Зелёное то что пришло с гитхаба и синее локальные изменения .
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
#         да.
# 27.1) Что может произойти когда stash восстановите после принятия pull?
#         конфликт.
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
#         4
# 29) Что делает кнопка complete merge?
#         подтверждает принятые изменения. завершает процесс разрешения конфликтов слияния в Merge Editor.
# 30) В какой чат нужно писать если остались вопросы?
#         Help me.
# 31) Что такое FORK? Зачем его делают?
#         Копирование репозитория чтобы сделать его личным. 19:05.
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
#         Заходим в кошку, нажимаю Clone repository, выбираю нужный репозиторий из списка, жму Clone и всё.
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
#     90%, Senatorov и другие студенты.
# 34) Как создать файл в vs code?
#     Кнопка с иконкой листа и плюса в проводнике, правой кнопкой в окне проводника нажимаем создать файл...
# 35) Файл лога нужно заполнять в конце каждого урока?
#     да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
#         jupytext --to py notebook.ipynb
# подсказка https://t.me/c/1937296927/1/26527
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
#         Пакетный менеджер — это набор программного обеспечения, который позволяет управлять процессом установки, удаления, настройки и обновления различных компонентов программного обеспечения. Использую конда. Для дата-сайенс лучше использовать conda, потому что он предназначен для работы с проектами, использующими несколько языков, и обеспечивает лучшую интеграцию с Conda.
# 3) Почему расширение py лучше чем ipynb?
#         позволяет запускать код прямо в браузере без необходимости конвертации файла.
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# 4.1) линтеры проверяют на соблюдение pep8?
#         да
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# 4.4) Зачем и где мы используем андерскор _
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

# quiz2
#
# Список вопросов к видео https://t.me/c/1937296927/765/29781 (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# 2. Как настроить перенос строки?
# 3. Сколько символов по pep8 разрешено на строке?
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# 8. Как вставить картинку в маркдаун?
# 9. Где посмотреть длину строки в vs code?
# 10. Как поменять тип ячейки с питона на маркдаун?
# 11. Как запустить сразу все ячейки в юпитере?
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# 16. Как очистить вывод ячеек которые уже запущены?
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# 18. Каким сочетанием убирается левый сайдбар?
# 19. Кнопка два листочка это наши локальные файлы?
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# 22. Что такое валидация?
# 23. Что такое трассировка ошибки?
# 24. Что значит отвалился интерпритатор?
#
# Отвечаете на вопросы в вашем редакторе кода.
